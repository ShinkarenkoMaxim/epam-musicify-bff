type Artist {
  id: ID!
  firstName: String
  secondName: String
  middleName: String
  birthDate: String
  birthPlace: String
  country: String
  bands: [Band]
  instruments: [String]
}

type Query {
  artist(id: ID!): Artist
  artists(paginationInput: PaginationInput): ArtistsResult
}

type Mutation {
  createArtist(createArtistInput: ArtistInput): Artist
  updateArtist(id: ID!, updateArtistInput: ArtistInput): Artist
  deleteArtist(id: ID!): DeleteArtistResult
}

type DeleteArtistResult {
  acknowledged: Boolean
  deletedCount: Int
}

type ArtistsResult {
  items: [Artist]
  limit: Int
  offset: Int
  total: Int
}

input ArtistInput {
  firstName: String
  secondName: String
  middleName: String
  birthDate: String
  birthPlace: String
  country: String
  bandsIds: [String]
  instruments: [String]
}

input PaginationInput {
  limit: Int
  offset: Int
}
